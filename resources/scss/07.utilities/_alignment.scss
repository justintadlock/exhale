////
/// Alignment classes.
///
/// Primarily, we use this to build out style rules for the core WordPress
/// `.align*` classes.
///
/// @group  Utilities
/// @author Justin Tadlock <justintadlock@gmail.com>
/// @link   https://themehybrid.com/themes/exhale
////

@media ( max-width: $content-width-padded ) {

	// Adds the correct left/right margins once we get smaller
	// than the content width. GB cancels out these margins
	// using `auto`, which means everything butts against the
	// side of the screen.
	[class^="wp-container-"][class*="wp-block"]:not([style*=padding-left]):not([style*=padding-right]) > :not(.alignwide):not(.alignfull) {
		margin-left: $spacing-global !important;
		margin-right: $spacing-global !important;
		max-width: calc( 100% - #{ $spacing-global * 2 } );
	}

	[class^="wp-container-"][class*="wp-block"] > .alignwide,
	[class^="wp-container-"][class*="wp-block"] > .alignfull {
		margin-left: auto !important;
		margin-right: auto !important;
		max-width: 100%;
	}
}

.alignfull + .alignfull,
.alignfull + [style*=hidden] + .alignfull,
.alignfull + [style*=hidden] + style + .alignfull,
.alignfull + style + .alignfull,
.alignfull + style + style + .alignfull,
.alignfull + style + [style*=hidden] + .alignfull,
.alignfull + style + [style*=hidden] + style + [style*=hidden] + .alignfull {
	margin-top: 0;
}

// If a user is putting a spacer before a block, let's
// assume they want to control the spacing here.
.wp-block-spacer + :not([style*=margin-top]),
.wp-block-spacer + style + :not([style*=margin-top]) {
	margin-top: 0;
}

// Left alignment.
.alignleft {
	float:  left;
	margin-right:  1.5rem !important;
	margin-bottom: 0.25rem;
}

// Right alignment.
.alignright {
	float:  right;
	margin-left: 1.5rem !important;
	margin-bottom: 0.25rem;
}

// Align full and wide classes.
.alignwide,
.alignfull,
.aligncenter {
	clear: both;
}

.alignfull,
.alignwide {
	max-width:    100%;
	margin-left:  auto;
	margin-right: auto;
}

.alignwide {
	max-width: var( --wp--custom--layout--wide );
}
