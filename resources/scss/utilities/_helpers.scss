////
/// Helper classes.
///
/// @group  Utilities
/// @author Justin Tadlock <justintadlock@gmail.com>
/// @link   https://themehybrid.com/themes/exhale
////

/// Separator used in metadata, etc.

.sep {
	margin: 0 0.5em;
}

/// Used for small images that are possibly something like a smiley, transparent
/// PNG, and so on where we don't want borders.

.is-style-borderless,
.is-style-borderless img {
	border: none;
	outline: none;
	box-shadow: none;
}

// Creates a rounded image.

.is-style-rounded img {
	border-radius: 9999px;
}

// Adds a box-shadow to elements.

p.is-style-shadow,
.is-style-shadow.wp-block-image img,
.is-style-shadow.wp-block-media-text img,
.is-style-shadow.wp-block-gallery img {
	box-shadow: 0 4px 10px 0 rgba( 0, 0, 0, 0.3 );
}

.wp-block-image[class*=is-style-shadow],
.wp-block-media-text[class*=is-style-shadow] {
	box-shadow: none;
}

/// List styles.

.is-style-list-none   { list-style: none;   }
.is-style-list-disc   { list-style: disc;   }
.is-style-list-circle { list-style: circle; }
.is-style-list-square { list-style: square; }

/// Used for paragraphs that only contain an image. These have no height. We use
/// JS to add the `.is-collapsed` class and remove any margins and paddings.

.is-collapsed {
	margin-bottom: 0;
	margin-top: 0;
}

/// Removes the whitespace between full-width elements so that they're stacked
/// directly on top of one another.  All the ridiculous CSS wrangling is due to
/// Gutenberg not adding a `.has-background` class to blocks with a background.
///
/// @link https://github.com/WordPress/gutenberg/issues/11172

.alignfull[style*=background-color] + .alignfull[style*=background-color],
.alignfull[style*=background-color] + .alignfull[class*=background-color],
.alignfull[style*=background-color] + .alignfull.wp-block-cover,
.alignfull[class*=background-color] + .alignfull[class*=background-color],
.alignfull[class*=background-color] + .alignfull[style*=background-color],
.alignfull[class*=background-color] + .alignfull.wp-block-cover,
.alignfull.wp-block-cover + .alignfull.wp-block-cover,
.alignfull.wp-block-cover + .alignfull[style*=background-cover],
.alignfull.wp-block-cover + .alignfull[class*=background-cover] {
	margin-top: -#{ $spacing-global };
}

/// If we have a text color, let's use that as the link color as well.  There's
/// no way for us to know if the colors will clash here, so let's keep it simple.

.has-text-color {

	a:not( .wp-block-button__link ) {
		color: inherit;
	}

	a:not( .wp-block-button__link ):hover,
	a:not( .wp-block-button__link ):focus {
		color:      inherit;
		background: rgba( 255, 255, 255, 0.2 );
	}
}

/// Give a default background color to blocks with an old background that the
/// theme doesn't recognize so that our margins and paddings don't look off.

.has-background,
.is-style-solid-color {
	background-color: var( --color-gray-lightest );
}

/// Loops through the theme colors and adds utility classes for them. Primarily,
/// these are the `.has-{$color}-color` and `.has-{$color}-background-color`
/// classes added via Gutenberg. However, they are useful elsewhere.

@each $color-name, $color-value in block-colors() {

	.has-#{ $color-name }-background-color,
	a.has-#{ $color-name }-background-color {
		background-color: $color-value;
	}

	// We must specifically set `a.has-{$color-name}-color` so that the
	// various link states keep the same color. This is generally used with
	// things like buttons.

	.has-#{ $color-name }-color,
	a.has-#{ $color-name }-color {
		color: $color-value;
	}

}

/// Background dim handling. Right now, this is primarily used with the Cover
/// block. However, it may be applied to other elements in the future, so we're
/// keeping it separate.

.has-background-dim::before {
	background-color: inherit;
	content:         "";
	position:         absolute;
	top:              0;
	left:             0;
	bottom:           0;
	right:            0;
	z-index:          0;
	opacity:          0.5;
}

// The background dim can be any number from 10-100, by 10s. We're just running
// a simple loop to add a black background color over the element.

@for $dim from 1 through 10 {

	.has-background-dim-#{ $dim * 10 }::before {
		opacity: $dim * 0.1;
	}
}

/// Loops through the editor font sizes and adds utility classes for them. This
/// handles the `.has-{$size}-font-size` classes added via Gutenberg, which may
/// be useful elsewhere.

@each $font-size-name, $font-size-value in editor-font-sizes() {

	.has-#{ $font-size-name }-font-size {
		font-size: #{ $font-size-value };
	}
}
